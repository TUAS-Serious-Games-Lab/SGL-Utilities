using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SGL.Analytics.Utilities.Logging.FileLogging {

	/// <summary>
	/// Encapsulates the configurations options for a single sink used by <see cref="FileLoggingProvider"/> to output messages to files in different ways.
	/// </summary>
	public class FileLoggingSinkOptions {
		/// <summary>
		/// A path under which the logfiles and subdirectories generated by <see cref="FilenameFormat"/> should be located.
		/// If this is <see langword="null"/>, the default value configured in <see cref="FileLoggingProviderOptions"/> is used.
		/// </summary>
		public string? BaseDirectory { get; set; } = null;
		/// <summary>
		/// A format string used to generate the file path (relative to <see cref="BaseDirectory"/>) of the log file, to which the current message should be written.
		/// If this is <see langword="null"/>, the default value configured in <see cref="FileLoggingProviderOptions"/> is used.
		/// </summary>
		public string? FilenameFormat { get; set; } = null;
		/// <summary>
		/// A format string used to generate the text that should be written to the file for the current message if the message has no exception associated.
		/// If this is <see langword="null"/>, the default value configured in <see cref="FileLoggingProviderOptions"/> is used.
		/// </summary>
		public string? MessageFormat { get; set; } = null;
		/// <summary>
		/// A format string used to generate the text that should be written to the file for the current message if the message has an exception associated.
		/// If this is <see langword="null"/>, the default value configured in <see cref="FileLoggingProviderOptions"/> is used.
		/// </summary>
		public string? MessageFormatException { get; set; } = null;
		/// <summary>
		/// The limit for the number of file streams that this sink can keep open.
		/// Higher limits trade less work for opening and closing files for using more open file handles.
		/// The default value is 16, and 0 or negative numbers lift the limit, which should be used with care to avoid exhausting process file handle limits.
		/// </summary>
		public int MaxOpenStreams { get; set; } = 16;
		/// <summary>
		/// The minimal log message verbosity level that this sink should accept.
		/// Messages with levels below it are filtered out.
		/// The default is <see cref="LogLevel.Trace"/> which is equivalent to no filtering.
		/// </summary>
		public LogLevel MinLevel { get; set; } = LogLevel.Trace;
		/// <summary>
		/// A list of or-combined category filters.
		/// A message is only accepted if its category either is present in <see cref="Categories"/> or
		/// if at least one entry from <see cref="CategoryContains"/> is contained in the message's category string,
		/// unless both lists are empty, which makes the sink accept all messages.
		/// </summary>
		public List<string> Categories { get; set; } = new();
		/// <summary>
		/// A list of or-combined category substring filters.
		/// A message is only accepted if its category either is present in <see cref="Categories"/> or
		/// if at least one string from <see cref="CategoryContains"/> is contained in the message's category string,
		/// unless both lists are empty, which makes the sink accept all messages.
		/// </summary>
		public List<string> CategoryContains { get; set; } = new();
	}

	/// <summary>
	/// Encapsulates the configurations options for the <see cref="FileLoggingProvider"/>.
	/// </summary>
	public class FileLoggingProviderOptions {
		/// <summary>
		/// The default value for <see cref="FileLoggingSinkOptions.BaseDirectory"/> for sinks that don't have their own value configured.
		/// The default value of this option is the value of <c>System.IO.Path.Combine(Environment.CurrentDirectory, "logs")</c>.
		/// </summary>
		public string BaseDirectory { get; set; } = Path.Combine(Environment.CurrentDirectory, "logs");
		/// <summary>
		/// The default value for <see cref="FileLoggingSinkOptions.FilenameFormat"/> for sinks that don't have their own value configured.
		/// The default value of this option is <c>"{Time:yyyy}/{Time:yyyyMMdd}_{AppDomainName}.log"</c>.
		/// </summary>
		public string FilenameFormat { get; set; } = "{Time:yyyy}/{Time:yyyyMMdd}_{AppDomainName}.log";
		/// <summary>
		/// The default value for <see cref="FileLoggingSinkOptions.MessageFormat"/> for sinks that don't have their own value configured.
		/// The default value of this option is <c>"[{Time:O}] [{Level}] [{Category}] {Text}"</c>.
		/// </summary>
		public string MessageFormat { get; set; } = "[{Time:O}] [{Level}] [{Category}] {Text}";
		/// <summary>
		/// The default value for <see cref="FileLoggingSinkOptions.MessageFormatException"/> for sinks that don't have their own value configured.
		/// The default value of this option is <c>"[{Time:O}] [{Level}] [{Category}] {Text}\n=> {Exception}"</c>.
		/// </summary>
		public string MessageFormatException { get; set; } = "[{Time:O}] [{Level}] [{Category}] {Text}\n=> {Exception}";
		/// <summary>
		/// A list of sink definitions to be used to actually output the messages to files.
		/// Note: By default, the list is empty and the messages are not written anywhere.
		/// </summary>
		public List<FileLoggingSinkOptions> Sinks { get; set; } = new();
		/// <summary>
		/// A dictionary of constant names mapping to values.
		/// These constant's names can be used as placeholder names in format strings, yielding their value as the placeholder value.
		/// This can be useful for scenarios where the sinks with their format strings are defined in a general config file, but they should contain environment-specific strings that need to be configured in a different config file (or another config source).
		/// </summary>
		public Dictionary<string, string> Constants { get; set; } = new();
	}
}
